[33mcommit 173f6ed2e7943b9e9e3e06350b2067df16a93cad[m
Author: Simon Ghyselincks <sghyselincks@gmail.com>
Date:   Fri Mar 29 21:55:31 2024 -0700

    moved frame rotation into sensor fusion class

[1mdiff --git a/fusion/AHRSfusion.py b/fusion/AHRSfusion.py[m
[1mindex 36a09b1..da99e70 100755[m
[1m--- a/fusion/AHRSfusion.py[m
[1m+++ b/fusion/AHRSfusion.py[m
[36m@@ -30,11 +30,17 @@[m [mclass AHRSfusion:[m
                                                 0,  # magnetic rejection[m
                                                 5 * self.sample_rate)  # recovery trigger period = 5 seconds[m
         [m
[31m-        [m
     def update(self, gyro_data, accel_data, mag_data = None, delta_time=.001):[m
[31m-        # Convert to numpy arrays[m
[31m-        accel_data = np.array(accel_data)[m
[31m-        gyro_data = np.array(gyro_data)[m
[32m+[m[32m        #Change alignment to robot frame:[m
[32m+[m[32m        #Y.imu -> X.robot; Z.imu -> Y.robot; X.imu -> Z.robot[m
[32m+[m[32m        def rotate_frame(x, y, z):[m
[32m+[m[32m            ''' Input: x, y, z in IMU frame[m
[32m+[m[32m                Output: x', y', z' in robot frame '''[m[41m                    [m
[32m+[m[32m            return y, z, x[m
[32m+[m[41m        [m
[32m+[m[32m        # Convert to numpy arrays and rotate to robot frame[m
[32m+[m[32m        accel_data = np.array(rotate_frame(*accel_data))[m
[32m+[m[32m        gyro_data = np.array(rotate_frame(*gyro_data))[m
         [m
         if mag_data is None:[m
             mag_data = np.array([0, 0, 0])[m
[1mdiff --git a/robot/RWIP.py b/robot/RWIP.py[m
[1mindex 81643bf..05a0e9f 100755[m
[1m--- a/robot/RWIP.py[m
[1m+++ b/robot/RWIP.py[m
[36m@@ -98,15 +98,15 @@[m [mclass RobotSystem:[m
                 return y, z, x[m
             [m
             # Fuse sensor data[m
[31m-            euler_angles, internal_states, flags = self.sensor_fusion.update(rotate_frame(gx, gy, gz), rotate_frame(ax, ay, az), delta_time = loop_period)[m
[32m+[m[32m            euler_angles, internal_states, flags = self.sensor_fusion.update((gx, gy, gz), (ax, ay, az), delta_time = loop_period)[m
                 [m
             # Update robot state and parameters[m
             if self.xmotor is not None:[m
                 await self.xmotor.update_state()[m
          [m
             control_input = ControlInput([m
[31m-                pendulum_angle=euler_angles[1], [m
[31m-                pendulum_vel=gz,  # gyro z[m
[32m+[m[32m                pendulum_angle=euler_angles[1], # euler y (robot frame)[m[41m [m
[32m+[m[32m                pendulum_vel=gz,  # gyro z (imu frame angular speed, gyro y in robot frame)[m
                 wheel_vel=0 if self.xmotor is None else self.xmotor.state['VELOCITY'][m
             )[m
             torque_request = self.controller.get_torque(control_input)[m
